{"/home/travis/build/npmtest/node-npmtest-ical/test.js":"/* istanbul instrument in package npmtest_ical */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ical/lib.npmtest_ical.js":"/* istanbul instrument in package npmtest_ical */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ical = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ical = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ical/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ical && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ical */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ical\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ical.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ical.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ical.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ical.__dirname + '/lib.npmtest_ical.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ical/node_modules/ical/index.js":"module.exports = require('./ical')\n\nvar node = require('./node-ical')\n\n// Copy node functions across to exports\nfor (var i in node){\n  module.exports[i] = node[i]\n}  ","/home/travis/build/npmtest/node-npmtest-ical/node_modules/ical/ical.js":"(function(name, definition) {\n\n/****************\n *  A tolerant, minimal icalendar parser\n *  (http://tools.ietf.org/html/rfc5545)\n *\n *  <peterbraden@peterbraden.co.uk>\n * **************/\n\n  if (typeof module !== 'undefined') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && typeof define.amd === 'object'){\n    define(definition);\n  } else {\n    this[name] = definition();\n  }\n\n}('ical', function(){\n\n   // Unescape Text re RFC 4.3.11\n  var text = function(t){\n    t = t || \"\";\n    return (t\n      .replace(/\\\\\\,/g, ',')\n      .replace(/\\\\\\;/g, ';')\n      .replace(/\\\\[nN]/g, '\\n')\n      .replace(/\\\\\\\\/g, '\\\\')\n    )\n  }\n\n  var parseParams = function(p){\n    var out = {}\n    for (var i = 0; i<p.length; i++){\n      if (p[i].indexOf('=') > -1){\n        var segs = p[i].split('=');\n        \n        out[segs[0]] = parseValue(segs.slice(1).join('='));\n        \n      }\n    }\n    return out || sp\n  }\n\n  var parseValue = function(val){\n    if ('TRUE' === val)\n      return true;\n    \n    if ('FALSE' === val)\n      return false;\n\n    var number = Number(val);\n    if (!isNaN(number))\n      return number;\n\n    return val;\n  }\n\n  var storeParam = function(name){\n    return function(val, params, curr){\n      var data;\n      if (params && params.length && !(params.length==1 && params[0]==='CHARSET=utf-8')){\n        data = {params:parseParams(params), val:text(val)}\n      }\n      else\n        data = text(val)\n\n      var current = curr[name];\n      if (Array.isArray(current)){\n        current.push(data);\n        return curr;\n      }\n\n      if (current != null){\n        curr[name] = [current, data];\n        return curr;\n      }\n\n      curr[name] = data;\n      return curr\n    }\n  }\n\n  var addTZ = function(dt, name, params){\n    var p = parseParams(params);\n\n    if (params && p){\n      dt[name].tz = p.TZID\n    }\n\n    return dt\n  }\n\n\n  var dateParam = function(name){\n    return function(val, params, curr){\n\n      // Store as string - worst case scenario\n      storeParam(name)(val, undefined, curr)\n\n      if (params && params[0] === \"VALUE=DATE\") {\n        // Just Date\n\n        var comps = /^(\\d{4})(\\d{2})(\\d{2})$/.exec(val);\n        if (comps !== null) {\n          // No TZ info - assume same timezone as this computer\n          curr[name] = new Date(\n            comps[1],\n            parseInt(comps[2], 10)-1,\n            comps[3]\n          );\n\n          return addTZ(curr, name, params);\n        }\n      }\n\n\n      //typical RFC date-time format\n      var comps = /^(\\d{4})(\\d{2})(\\d{2})T(\\d{2})(\\d{2})(\\d{2})(Z)?$/.exec(val);\n      if (comps !== null) {\n        if (comps[7] == 'Z'){ // GMT\n          curr[name] = new Date(Date.UTC(\n            parseInt(comps[1], 10),\n            parseInt(comps[2], 10)-1,\n            parseInt(comps[3], 10),\n            parseInt(comps[4], 10),\n            parseInt(comps[5], 10),\n            parseInt(comps[6], 10 )\n          ));\n          // TODO add tz\n        } else {\n          curr[name] = new Date(\n            parseInt(comps[1], 10),\n            parseInt(comps[2], 10)-1,\n            parseInt(comps[3], 10),\n            parseInt(comps[4], 10),\n            parseInt(comps[5], 10),\n            parseInt(comps[6], 10)\n          );\n        }\n      }\n\n      return addTZ(curr, name, params)\n    }\n  }\n\n\n  var geoParam = function(name){\n    return function(val, params, curr){\n      storeParam(val, params, curr)\n      var parts = val.split(';');\n      curr[name] = {lat:Number(parts[0]), lon:Number(parts[1])};\n      return curr\n    }\n  }\n\n  var categoriesParam = function (name) {\n    var separatorPattern = /\\s*,\\s*/g;\n    return function (val, params, curr) {\n      storeParam(val, params, curr)\n      curr[name] = val ? val.split(separatorPattern) : []\n      return curr\n    }\n  }\n\n  var addFBType = function(fb, params){\n    var p = parseParams(params);\n\n    if (params && p){\n      fb.type = p.FBTYPE || \"BUSY\"\n    }\n\n    return fb;\n  }\n\n  var freebusyParam = function (name) {\n    return function(val, params, curr){\n      var fb = addFBType({}, params);\n      curr[name] = curr[name] || []\n      curr[name].push(fb);\n\n      storeParam(val, params, fb);\n\n      var parts = val.split('/');\n\n      ['start', 'end'].forEach(function (name, index) {\n        dateParam(name)(parts[index], params, fb);\n      });\n\n      return curr;\n    }\n  }\n\n  return {\n\n\n    objectHandlers : {\n      'BEGIN' : function(component, params, curr, stack){\n          stack.push(curr)\n\n          return {type:component, params:params}\n        }\n\n      , 'END' : function(component, params, curr, stack){\n        // prevents the need to search the root of the tree for the VCALENDAR object\n        if (component === \"VCALENDAR\") {\n            //scan all high level object in curr and drop all strings\n            var key,\n                obj;\n            \n            for (key in curr) {\n                if(curr.hasOwnProperty(key)) {\n                   obj = curr[key];\n                   if (typeof obj === 'string') {\n                       delete curr[key];\n                   }\n                }\n            }\n            \n            return curr\n        }\n        \n        var par = stack.pop()\n\n        if (curr.uid)\n          par[curr.uid] = curr\n        else\n          par[Math.random()*100000] = curr  // Randomly assign ID : TODO - use true GUID\n\n        return par\n      }\n\n      , 'SUMMARY' : storeParam('summary')\n      , 'DESCRIPTION' : storeParam('description')\n      , 'URL' : storeParam('url')\n      , 'UID' : storeParam('uid')\n      , 'LOCATION' : storeParam('location')\n      , 'DTSTART' : dateParam('start')\n      , 'DTEND' : dateParam('end')\n      ,' CLASS' : storeParam('class')\n      , 'TRANSP' : storeParam('transparency')\n      , 'GEO' : geoParam('geo')\n      , 'PERCENT-COMPLETE': storeParam('completion')\n      , 'COMPLETED': dateParam('completed')\n      , 'CATEGORIES': categoriesParam('categories')\n      , 'FREEBUSY': freebusyParam('freebusy')\n    },\n\n\n    handleObject : function(name, val, params, ctx, stack, line){\n      var self = this\n\n      if(self.objectHandlers[name])\n        return self.objectHandlers[name](val, params, ctx, stack, line)\n\n      //handling custom properties\n      if(name.match(/X\\-[\\w\\-]+/) && stack.length > 0) {\n          //trimming the leading and perform storeParam\n          name = name.substring(2);\n          return (storeParam(name))(val, params, ctx, stack, line);\n      }\n      \n      return storeParam(name.toLowerCase())(val, params, ctx);\n    },\n\n\n    parseICS : function(str){\n      var self = this\n      var lines = str.split(/\\r?\\n/)\n      var ctx = {}\n      var stack = []\n\n      for (var i = 0, ii = lines.length, l = lines[0]; i<ii; i++, l=lines[i]){\n        //Unfold : RFC#3.1\n        while (lines[i+1] && /[ \\t]/.test(lines[i+1][0])) {\n          l += lines[i+1].slice(1)\n          i += 1\n        }\n\n        var kv = l.split(\":\")\n\n        if (kv.length < 2){\n          // Invalid line - must have k&v\n          continue;\n        }\n\n        // Although the spec says that vals with colons should be quote wrapped\n        // in practise nobody does, so we assume further colons are part of the\n        // val\n        var value = kv.slice(1).join(\":\")\n          , kp = kv[0].split(\";\")\n          , name = kp[0]\n          , params = kp.slice(1)\n\n        ctx = self.handleObject(name, value, params, ctx, stack, l) || {}\n      }\n\n       // type and params are added to the list of items, get rid of them.\n       delete ctx.type\n       delete ctx.params\n\n       return ctx\n    }\n\n  }\n}))\n","/home/travis/build/npmtest/node-npmtest-ical/node_modules/ical/node-ical.js":"var ical = require('./ical')\n  , request = require('request')\n  , fs = require('fs')\n\nexports.fromURL = function(url, opts, cb){\n  if (!cb)\n    return;\n  request(url, opts, function(err, r, data){\n    if (err)\n      return cb(err, null);\n    cb(undefined, ical.parseICS(data));\n  })\n}\n\nexports.parseFile = function(filename){\n  return ical.parseICS(fs.readFileSync(filename, 'utf8'))\n}\n\n\nvar rrule = require('rrule').RRule\n\nical.objectHandlers['RRULE'] = function(val, params, curr, stack, line){\n  curr.rrule = line;\n  return curr\n}\nvar originalEnd = ical.objectHandlers['END'];\nical.objectHandlers['END'] = function(val, params, curr, stack){\n  if (curr.rrule) {\n    var rule = curr.rrule.replace('RRULE:', '');\n    if (rule.indexOf('DTSTART') === -1) {\n      rule += ';DTSTART=' + curr.start.toISOString().replace(/[-:]/g, '');\n      rule = rule.replace(/\\.[0-9]{3}/, '');\n    }\n    curr.rrule = rrule.fromString(rule);\n  }\n  return originalEnd.call(this, val, params, curr, stack);\n}\n"}